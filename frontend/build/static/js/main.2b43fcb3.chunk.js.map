{"version":3,"sources":["apis/Dashboard.js","components/PanelLoader.js","components/BaseTable.js","components/DashTable.js","index.js"],"names":["a","axios","get","api","console","log","data","defaults","xsrfHeaderName","PanelLoader","Panel","Body","className","colourStyles","option","styles","color","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","textColumnFilter","count","length","value","onChange","e","target","undefined","placeholder","defaultPropGetter","BaseTable","isLoading","error","columns","getRowProps","defaultColumn","React","useMemo","Filter","filterTypes","text","rows","ids","filter","row","some","id","rowValue","values","name","toLowerCase","includes","useTable","initialState","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","Table","striped","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canSort","isSorted","isSortedDesc","Glyphicon","glyph","canFilter","i","cells","cell","style","verticalAlign","getCellProps","ButtonToolbar","ButtonGroup","Button","bsStyle","onClick","disabled","active","SplitButton","title","onSelect","Number","MenuItem","eventKey","Dashboard","useQuery","loadDash","Header","accessor","Cell","props","whiteSpace","options","Set","forEach","service","add","label","defaultValue","concat","o","reduce","p","c","str","TimeAgo","addDefaultLocale","en","queryClient","QueryClient","InvoicesView","client","appDiv","document","getElementById"],"mappings":"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","file":"static/js/main.2b43fcb3.chunk.js","sourcesContent":["import axios from \"axios\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nexport async function loadDash() {\n  const api = await axios.get(`/indy/api/structure/list`);\n  console.log(`get structure list in api`);\n  console.log(api);\n  return api.data;\n}\n","import React from \"react\";\nimport { Bars } from \"@agney/react-loading\";\nimport { Panel } from \"react-bootstrap\";\nexport const PanelLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <Bars className=\"spinner-size\" />\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useTable, useFilters, usePagination, useSortBy } from \"react-table\";\nimport Select from \"react-select\";\nimport { Bars } from \"@agney/react-loading\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Glyphicon,\n  MenuItem,\n  SplitButton,\n  Table,\n} from \"react-bootstrap\";\nimport \"./BaseTable.css\";\n\nexport const colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  return <></>;\n}\n\nexport function textColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      className=\"form-control\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { setFilter, filterValue, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    if (!preFilteredRows) {\n      return [];\n    }\n    preFilteredRows.forEach((row) => {\n      if (row.values[id] !== null) {\n        if (typeof row.values[id] === \"object\") {\n          options.add(row.values[id][\"name\"]);\n        } else {\n          options.add(row.values[id]);\n        }\n      }\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      key={filterValue}\n      title={filterValue}\n      onChange={(e) => setFilter(e.value)}\n      value={{ label: filterValue || \"All\" }}\n      defaultValue={{ label: \"All\" }}\n      styles={colourStyles}\n      options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n        options.map((o, i) => {\n          return { id: i, value: o, label: o };\n        })\n      )}\n    />\n  );\n}\n\nconst defaultPropGetter = () => ({});\n\nexport const BaseTable = ({\n  isLoading,\n  data,\n  error,\n  columns,\n  getRowProps = defaultPropGetter,\n}) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, ids, filterValue) => {\n        return rows.filter((row) => {\n          return ids.some((id) => {\n            if (!filterValue) {\n              return true;\n            } else {\n              let rowValue = row.values[id];\n              if (typeof rowValue === \"object\") {\n                rowValue = rowValue.name;\n              }\n              return rowValue\n                ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                : false;\n            }\n          });\n        });\n      },\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      initialState: { pageSize: 25 },\n    },\n    useFilters,\n    useSortBy,\n    usePagination\n  );\n\n  if (isLoading)\n    return (\n      <div className=\"col-xs-12 text-center\">\n        <Bars className=\"spinner-size\" />\n      </div>\n    );\n\n  if (error) return <div></div>;\n\n  return (\n    <>\n      <Table striped>\n        <thead {...getTableProps()}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span className=\"pull-right\">\n                    {column.canSort ? (\n                      column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <Glyphicon glyph=\"sort-by-attributes-alt\" />\n                        ) : (\n                          <Glyphicon glyph=\"sort-by-attributes\" />\n                        )\n                      ) : (\n                        <Glyphicon glyph=\"sort\" />\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps(getRowProps(row))}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td\n                      style={{ verticalAlign: \"middle\" }}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <div className=\"pagination pull-right\">\n        <ButtonToolbar>\n          <ButtonGroup>\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"step-backward\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"triangle-left\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"triangle-right\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"step-forward\" />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <Button active bsStyle=\"success\">\n              {\"Page Size:\"}\n            </Button>{\" \"}\n            <SplitButton\n              bsStyle=\"success\"\n              title={pageSize}\n              onSelect={(e) => {\n                setPageSize(Number(e));\n              }}\n            >\n              {[25, 50, 100, 1000].map((pageSize) => (\n                <MenuItem eventKey={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </MenuItem>\n              ))}\n            </SplitButton>\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n      <div className=\"pagination pull-left\">\n        <ButtonGroup>\n          <Button active bsStyle=\"info\">\n            {\n              <>\n                Page{\" \"}\n                <strong>\n                  {pageIndex + 1} of {pageOptions.length}\n                </strong>\n              </>\n            }\n          </Button>{\" \"}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Panel, Label } from \"react-bootstrap\";\nimport { useQuery } from \"react-query\";\nimport { loadDash } from \"../apis/Dashboard\";\nimport { PanelLoader } from \"./PanelLoader\";\nimport { BaseTable, textColumnFilter, colourStyles } from \"./BaseTable\";\nimport Select from \"react-select\";\n\nexport const Dashboard = () => {\n  const { isLoading, error, data } = useQuery([\"dashboard\"], () => loadDash());\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Structure\",\n        accessor: \"name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            {props.value}\n          </div>\n        ),\n\n      },\n      {\n        Header: \"Services\",\n        accessor: \"services\",\n        Filter: ({\n          column: { setFilter, filterValue, preFilteredRows, id },\n        }) => {\n          const options = React.useMemo(() => {\n            const options = new Set();\n            if (!preFilteredRows) {\n              return [];\n            }\n            preFilteredRows.forEach((row) => {\n              if (row.values[id] !== null) {\n                row.values[id].forEach((service) => {\n                  options.add(service);\n                });\n              }\n            });\n            return [...options.values()];\n          }, [id, preFilteredRows]);\n          return (\n            <Select\n              key={filterValue}\n              title={filterValue}\n              onChange={(e) => setFilter(e.value)}\n              value={{ label: filterValue || \"All\" }}\n              defaultValue={{ label: \"All\" }}\n              styles={colourStyles}\n              options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n                options.map((o, i) => {\n                  return { id: i, value: o, label: o };\n                })\n              )}\n            />\n          );\n        },\n        filter: (rows, ids, filterValue) => {\n          return rows.filter((row) => {\n            return ids.some((id) => {\n              if (!filterValue) {\n                return true;\n              } else {\n                let rowValue = row.values[id].reduce((p, c) => {\n                  return p + \"  \" + c;\n                }, \"\");\n                return rowValue\n                  ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                  : false;\n              }\n            });\n          });\n        },\n        Cell: (props) =>\n          props.value ? (\n            <div className=\"text-center\">\n              {props.value.map((service) => {\n                return (\n                  <p\n                    className=\"padded-label\"\n                  >\n                    {service}\n                  </p>\n                );\n              })}\n            </div>\n          ) : (\n            <></>\n          ),\n      },\n      {\n        Header: \"Rigs\",\n        accessor: \"rigs\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div>\n            {props.value.map(str => <p>{str}</p>)}\n          </div>\n        ),\n\n      },\n    ],\n    []\n  );\n\n  if (isLoading) return <PanelLoader />;\n\n  if (error) return <div></div>;\n\n  return (\n    <Panel.Body>\n      <BaseTable {...{ isLoading, data, columns, error }} />\n    </Panel.Body>\n  );\n};\n","import TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Dashboard }  from \"./components/DashTable\";\nimport \"./index.css\";\n\nTimeAgo.addDefaultLocale(en);\n\nconst queryClient = new QueryClient();\n\nconst InvoicesView = () => {    \n  return (\n    <QueryClientProvider client={queryClient}>\n      <Dashboard />\n    </QueryClientProvider>\n  );\n};\n\nconst appDiv = document.getElementById(\"root\");\nrender(<InvoicesView />, appDiv);\n"],"sourceRoot":""}