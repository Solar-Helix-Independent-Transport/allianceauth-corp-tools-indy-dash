{"version":3,"sources":["apis/Dashboard.js","components/PanelLoader.js","components/BaseTable.js","components/DashTable.js","index.js"],"names":["a","axios","get","api","console","log","data","defaults","xsrfHeaderName","PanelLoader","Panel","Body","className","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","textColumnFilter","count","length","value","onChange","e","target","undefined","placeholder","defaultPropGetter","BaseTable","isLoading","error","columns","getRowProps","defaultColumn","React","useMemo","Filter","filterTypes","text","rows","ids","filter","row","some","id","rowValue","values","toLowerCase","includes","useTable","initialState","pageSize","useFilters","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","Table","striped","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","i","cells","cell","style","verticalAlign","getCellProps","ButtonToolbar","ButtonGroup","Button","bsStyle","onClick","disabled","Glyphicon","glyph","active","SplitButton","title","onSelect","Number","MenuItem","eventKey","Dashboard","useQuery","loadDash","Header","accessor","Cell","props","whiteSpace","split","str","TimeAgo","addDefaultLocale","en","queryClient","QueryClient","InvoicesView","client","appDiv","document","getElementById"],"mappings":"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","file":"static/js/main.ec520542.chunk.js","sourcesContent":["import axios from \"axios\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nexport async function loadDash() {\n  const api = await axios.get(`/indy/api/structure/list`);\n  console.log(`get structure list in api`);\n  console.log(api);\n  return api.data;\n}\n","import React from \"react\";\nimport { Bars } from \"@agney/react-loading\";\nimport { Panel } from \"react-bootstrap\";\nexport const PanelLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <Bars className=\"spinner-size\" />\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useTable, useFilters, usePagination } from \"react-table\";\nimport Select from \"react-select\";\nimport { Bars } from \"@agney/react-loading\";\n\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Glyphicon,\n  MenuItem,\n  SplitButton,\n  Table,\n} from \"react-bootstrap\";\n\nconst colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  return <></>;\n}\n\nexport function textColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      className=\"form-control\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { setFilter, filterValue, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    if (!preFilteredRows) {\n      return [];\n    }\n    preFilteredRows.forEach((row) => {\n      if (row.values[id] !== null) {\n        options.add(row.values[id]);\n      }\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      key={filterValue}\n      title={filterValue}\n      onChange={(e) => setFilter(e.value)}\n      value={{ label: filterValue || \"All\" }}\n      defaultValue={{ label: \"All\" }}\n      styles={colourStyles}\n      options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n        options.map((o, i) => {\n          return { id: i, value: o, label: o };\n        })\n      )}\n    />\n  );\n}\n\nconst defaultPropGetter = () => ({});\n\nexport const BaseTable = ({\n  isLoading,\n  data,\n  error,\n  columns,\n  getRowProps = defaultPropGetter,\n}) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, ids, filterValue) => {\n        return rows.filter((row) => {\n          return ids.some((id) => {\n            if (!filterValue) {\n              return true;\n            } else {\n              const rowValue = row.values[id];\n              return rowValue ? rowValue.toLowerCase().includes(filterValue.toLowerCase()) : false;\n            }\n          });\n        });\n      },\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      initialState: { pageSize: 25 },\n    },\n    useFilters,\n    usePagination\n  );\n\n  if (isLoading)\n    return (\n      <div className=\"col-xs-12 text-center\">\n        <Bars className=\"spinner-size\" />\n      </div>\n    );\n\n  if (error) return <div></div>;\n\n  return (\n    <>\n      <Table striped>\n        <thead {...getTableProps()}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n            </tr>\n          ))}\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps(getRowProps(row))}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td\n                      style={{ verticalAlign: \"middle\" }}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <div className=\"pagination pull-right\">\n        <ButtonToolbar>\n          <ButtonGroup>\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"step-backward\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"triangle-left\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"triangle-right\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"step-forward\" />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <Button active bsStyle=\"success\">\n              {\"Page Size:\"}\n            </Button>{\" \"}\n            <SplitButton\n              bsStyle=\"success\"\n              title={pageSize}\n              onSelect={(e) => {\n                setPageSize(Number(e));\n              }}\n            >\n              {[25, 50, 100, 1000].map((pageSize) => (\n                <MenuItem eventKey={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </MenuItem>\n              ))}\n            </SplitButton>\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n      <div className=\"pagination pull-left\">\n        <ButtonGroup>\n          <Button active bsStyle=\"info\">\n            {\n              <>\n                Page{\" \"}\n                <strong>\n                  {pageIndex + 1} of {pageOptions.length}\n                </strong>\n              </>\n            }\n          </Button>{\" \"}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Panel } from \"react-bootstrap\";\nimport { useQuery } from \"react-query\";\nimport { loadDash } from \"../apis/Dashboard\";\nimport { PanelLoader } from \"./PanelLoader\";\nimport { BaseTable, textColumnFilter } from \"./BaseTable\";\n\nexport const Dashboard = () => {\n  const { isLoading, error, data } = useQuery([\"dashboard\"], () => loadDash());\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Structure\",\n        accessor: \"name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            {props.value}\n          </div>\n        ),\n\n      },\n      {\n        Header: \"Services\",\n        accessor: \"services\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div>\n            {props.value.split('|').map(str => <p>{str}</p>)}\n          </div>\n        ),\n\n      },\n      {\n        Header: \"Rigs\",\n        accessor: \"rigs\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div>\n            {props.value.split('|').map(str => <p>{str}</p>)}\n          </div>\n        ),\n\n      },\n    ],\n    []\n  );\n\n  if (isLoading) return <PanelLoader />;\n\n  if (error) return <div></div>;\n\n  return (\n    <Panel.Body>\n      <BaseTable {...{ isLoading, data, columns, error }} />\n    </Panel.Body>\n  );\n};\n","import TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Dashboard }  from \"./components/DashTable\";\nimport \"./index.css\";\n\nTimeAgo.addDefaultLocale(en);\n\nconst queryClient = new QueryClient();\n\nconst InvoicesView = () => {    \n  return (\n    <QueryClientProvider client={queryClient}>\n      <Dashboard />\n    </QueryClientProvider>\n  );\n};\n\nconst appDiv = document.getElementById(\"root\");\nrender(<InvoicesView />, appDiv);\n"],"sourceRoot":""}